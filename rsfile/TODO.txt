

*Test on all python implementations, versions, on all platforms etc.

*Make inheritable streams picklable for multiprocessing use, along with their semaphores

*Design a strong exception hierarchy for IO/OS errors - if it is really possible from native error codes

*Create a global option registry to activate debugging systems (open handle counting, deadlock detection...)

*Test the behaviour of open() with broken symlinks, and how must-exist and must-not-exist deal with that 

# test that buffers don't mess with file size !!!

* avoid sync() on laptops ???? or inform people about dangers

check __getattr__ and __setattr_ of threadsafe wrapper !

Tester win32 truncate sur fichier locked

OPTIMISER READALL() avec join()

CHECK that we're not on a Pipe or TTY !!!!!!

differenciate buffering=None and buffering=0 !!!!!!!!!


Regler problemes de buffering -> raw stream
En particulier dans read_from_file : readall() or read(None) ???

  	
"""
TODO : add support for sparse files on ntfs !!!

See also FSCTL_SET_ZERO_DATA Control Code

The bug requests that sparse files be created by default at least by RandomAccessFile.  It is probably inappropriate to do this for all files, but adding an API to File (or a new constructor) to explicitly request creation of a sparse file is reasonable. RAF could be modified to always (or optionally) call that API.  Random access files are used by applications on many systems in a way where system support for sparse files is of benefit.  Existing programs, such as data bases that are implemented in C often take advantage of this.  It should be possible to do so in Java as well on OSs that support this.  As noted in the description, we already support this for unix. 
 
To support this on NTFS, will need to add a call to the win32 API DeviceIoControl with the FSCTL_SET_SPARSE flag after the file has been  created. 
""" 
